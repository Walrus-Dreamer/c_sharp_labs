using System;
using System.Linq;
using HackathonProblem.Models;
using HackathonProblem.Services;
using Xunit;
using Moq;

namespace HackathonProblem.Tests
{
    public class HrManagerTests
    {
        [Fact]
        public void HrManager_ShouldCreateCorrectNumberOfTeams()
        {

            var hrManager = new HrManager();
            var juniors = hrManager.LoadJuniors();
            var teamLeads = hrManager.LoadTeamLeads();


            hrManager.GenerateWishlists(juniors, teamLeads);
            var pairs = hrManager.AssignTeams(juniors, teamLeads);


            Assert.Equal(juniors.Count, pairs.Count);
        }

        [Fact]
        public void HrManager_ShouldReturnPredefinedDistribution()
        {

            var hrManager = new HrManager();
            var juniors = hrManager.LoadJuniors();
            var teamLeads = hrManager.LoadTeamLeads();

            // Predefine some specific preferences.
            juniors[0].Wishlist = new List<int> { 0, 1, 2 };
            teamLeads[0].Wishlist = new List<int> { 0, 1, 2 };


            hrManager.GenerateWishlists(juniors, teamLeads);
            var pairs = hrManager.AssignTeams(juniors, teamLeads);


            Assert.Equal(0, pairs[0].JuniorId);
            Assert.Equal(0, pairs[0].TeamLeadId);
        }

        [Fact]
        public void HrManagerStrategy_ShouldBeCalledOnce()
        {
            var mockStrategy = new Mock<ITeamBuildingStrategy>();
            var hrManager = new HrManager(mockStrategy.Object);
            var juniors = hrManager.LoadJuniors();
            var teamLeads = hrManager.LoadTeamLeads();

            hrManager.GenerateWishlists(juniors, teamLeads);
            hrManager.AssignTeams(juniors, teamLeads);

            mockStrategy.Verify(strategy => strategy.GeneratePairs(juniors, teamLeads), Times.Once);
        }
    }
}
